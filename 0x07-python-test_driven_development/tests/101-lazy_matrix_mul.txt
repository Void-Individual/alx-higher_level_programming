The ''101-lazy_matrix_mul'' module
==============================

Using ''lazy_matrix_mul''
------------------------------

Import the function
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Testing matrices of correct values
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
           [15, 22]])

Testing matrices of correct values
    >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

Testing matrices of correct values with floats
    >>> lazy_matrix_mul([[1.0, 2.0]], [[3.0, 4.0], [5.0, 6.0]])
    array([[13., 16.]])

Testing m_a as a list of integers
    >>> lazy_matrix_mul([1, 2], [[3, 4], [5, 6]])
    Traceback (most recent call last):
        . . .
    array([13, 16])

Testing m_a as a string
    >>> lazy_matrix_mul('matrix', [[3, 4], [5, 6]])
    Traceback (most recent call last):
        . . .
    TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U6') dtype('<U6') dtype('<U6')

Testing m_b as a string
    >>> lazy_matrix_mul([[3, 4], [5, 6]], 'matrix')
    Traceback (most recent call last):
        . . .
    TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U6') dtype('<U6') dtype('<U6')

Testing m_b as a list of integers
    >>> lazy_matrix_mul([[3, 4], [5, 6]], [1, 2])
    Traceback (most recent call last):
        . . .
    array([11, 17])

Testing m_a as an empty list
    >>> lazy_matrix_mul([], [[3, 4], [5, 6]])
    Traceback (most recent call last):
        . . .
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

Testing m_b as an empty list
    >>> lazy_matrix_mul([[3, 4], [5, 6]], [])
    Traceback (most recent call last):
        . . .
    ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

Testing m_a as a list with an empty list
    >>> lazy_matrix_mul([[]], [[3, 4], [5, 6]])
    Traceback (most recent call last):
        . . .
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

Testing m_b as a list with an empty list
    >>> lazy_matrix_mul([[3, 4], [5, 6]], [[]])
    Traceback (most recent call last):
        . . .
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

Testing m_a as a list of a list containing string
    >>> lazy_matrix_mul([['matrix']], [[3, 4], [5, 6]])
    Traceback (most recent call last):
        . . .
    ValueError: shapes (1,1) and (2,2) not aligned: 1 (dim 1) != 2 (dim 0)

Testing m_b as a list of a list containing string
    >>> lazy_matrix_mul([[3, 4], [5, 6]], [['matrix']])
    Traceback (most recent call last):
        . . .
    ValueError: shapes (2,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0)

Testing m_a with rows of different sizes
    >>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        . . .
    ValueError: setting an array element with a sequence.

Testing m_b with rows of different sizes
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
        . . .
    ValueError: setting an array element with a sequence.

Testing m_a column and m_b rows having different sizes
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]])
    Traceback (most recent call last):
        . . .
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)
